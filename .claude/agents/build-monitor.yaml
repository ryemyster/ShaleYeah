name: build-monitor
description: "Build validation, configuration monitoring, and CI/CD operations specialist"
version: "1.0.0"

inputs:
  required:
    - source_code: "Source code changes and commits"
  optional:
    - dependency_manifests: "package.json, requirements.txt files"
    - config_files: "Configuration files and environment variables"
    - pipeline_logs: "CI/CD pipeline status and logs"

outputs:
  - name: build_status.md
    description: "Comprehensive build health report"
    path: "${OUT_DIR}/build/build_status.md"
  - name: dependency_audit.md
    description: "Security and compatibility analysis"
    path: "${OUT_DIR}/build/dependency_audit.md"
  - name: deployment_readiness.md
    description: "Environment validation results"
    path: "${OUT_DIR}/build/deployment_readiness.md"
  - name: performance_metrics.md
    description: "Build and runtime performance analysis"
    path: "${OUT_DIR}/build/performance_metrics.md"

tools:
  - npm
  - pip
  - typescript_compiler
  - security_scanner
  - performance_profiler

workflow:
  steps:
    - name: "pre_build_validation"
      description: "Validate manifests and check for vulnerabilities"
      command: "npm audit && pip check"
    - name: "build_execution"
      description: "Run compilation and syntax checks"
      command: "npx tsc --noEmit && python -m py_compile tools/*.py"
    - name: "integration_testing"
      description: "Execute demo pipeline end-to-end"
      command: "bash scripts/demo.sh"
    - name: "performance_analysis"
      description: "Measure build times and resource usage"
      action: "analyze_performance"
    - name: "deployment_validation"
      description: "Verify Docker builds and environment setup"
      action: "validate_deployment"

quality_gates:
  - check: "TypeScript compilation passes without errors"
    validation: "npx tsc --noEmit"
  - check: "No high/critical security vulnerabilities"
    validation: "npm audit --audit-level high"
  - check: "Demo pipeline completes in under 5 minutes"
    validation: "timeout 300 bash scripts/demo.sh"
  - check: "All agent specifications are valid"
    validation: "find .claude/agents -name '*.yaml' -exec python -c 'import yaml; yaml.safe_load(open(\"{}\"))' \\;"

build_checklist:
  code_quality:
    - typescript_strict_mode: true
    - python_type_hints: true
    - linting_passes: true
    - no_hardcoded_secrets: true
  dependencies:
    - secure_packages: true
    - no_vulnerabilities: true
    - no_conflicts: true
    - license_compatible: true
  tools_integration:
    - all_tools_execute: true
    - las_parsing_works: true
    - access_ingest_works: true
    - web_fetch_safe: true
  pipeline_validation:
    - yaml_executes: true
    - outputs_generated: true
    - attribution_present: true
    - error_handling_works: true

performance_benchmarks:
  tool_execution: 30  # seconds
  agent_processing: 120  # seconds  
  full_pipeline: 300  # seconds
  build_time: 180  # seconds
  test_suite: 120  # seconds

error_handling:
  on_failure:
    - log_error: true
    - generate_detailed_report: true
    - continue_pipeline: false
  timeout: 600
  max_retries: 1

success_criteria:
  - "Maintains 100% build success rate for main branch"
  - "Prevents security vulnerabilities from entering codebase"
  - "Keeps demo pipeline execution under 5 minutes"
  - "Provides clear, actionable feedback for all issues"
  - "Enables confident deployment to production environments"

next_agents:
  on_success: ["test-agent"]
  on_failure: ["reporter"]

environment:
  RUN_ID: "${RUN_ID}"
  OUT_DIR: "${OUT_DIR}"

cli:
  entrypoint: "python agents/build_monitor_agent.py"
  args:
    - "--source-dir=."
    - "--output-dir=${OUT_DIR}/build"
    - "--run-id=${RUN_ID}"

metadata:
  author: "SHALE YEAH Platform"
  license: "Apache-2.0"
  created: "2024-08-18"
  priority: 0
  category: "build_validation"
  run_before_pipeline: true